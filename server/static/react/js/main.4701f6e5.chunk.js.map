{"version":3,"sources":["serviceWorker.js","Scheduler.js","index.js"],"names":["Boolean","window","location","hostname","match","Scheduler","state","players","startDate","Date","weeks","offPlayers","assignStart","e","setState","target","value","assignWeeks","submitParams","console","log","fetch","then","response","json","data","updateOffPlayers","updatePlayers","className","htmlFor","id","selected","this","onChange","placeholderText","placeholder","onClick","React","Component","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAYoBA,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCuEOC,G,iNAnFXC,MAAM,CACFC,QAAU,GACVC,UAAW,IAAIC,KACfC,MAAM,EACNC,WAAW,G,EAGfC,YAAc,SAACC,GACX,EAAKC,SAAS,CAACN,UAAUK,EAAEE,OAAOC,S,EAGtCC,YAAc,SAACJ,GACX,EAAKC,SAAS,CAACJ,MAAMG,EAAEE,OAAOC,S,EAGlCE,aAAe,WACXC,QAAQC,IAAR,gBAAqB,EAAKd,MAAME,YAChCW,QAAQC,IAAR,gBAAqB,EAAKd,MAAMI,QAChCS,QAAQC,IAAR,kBAAuB,EAAKd,MAAMC,UAClCY,QAAQC,IAAR,sBAA2B,EAAKd,MAAMK,aACtCU,MAAM,UAAUC,KAAK,SAAAC,GAAQ,OACzBA,EAASC,OAAOF,KAAK,SAAAG,GACjBN,QAAQC,IAAIK,Q,EAKxBC,iBAAmB,SAACb,GAChB,EAAKC,SAAS,CAACH,WAAWE,EAAEE,OAAOC,S,EAGvCW,cAAgB,SAACd,GACb,EAAKC,SAAS,CAACP,QAAQM,EAAEE,OAAOC,S,wEAIhC,OACI,yBAAKY,UAAU,QACX,yBAAKA,UAAU,2BACX,wBAAIA,UAAU,cAAd,oCAEJ,yBAAKA,UAAU,aACX,2BAAOA,UAAU,YAAYC,QAAQ,mBAArC,iCACA,yBAAKD,UAAU,4BACX,kBAAC,IAAD,CACIE,GAAG,kBACHC,SAAUC,KAAK1B,MAAME,UACrByB,SAAUD,KAAKpB,YACfsB,gBAAgB,gBAExB,2BAAOL,QAAQ,cAAf,mCACA,yBAAKD,UAAU,eACX,2BACIE,GAAG,aACHd,MAAOgB,KAAK1B,MAAMI,MAClBuB,SAAUD,KAAKf,YACfkB,YAAY,oBALpB,UAOA,2BAAON,QAAQ,WAAf,WACA,yBAAKD,UAAU,eACX,2BACIE,GAAG,UACHd,MAAOgB,KAAK1B,MAAMC,QAClB0B,SAAUD,KAAKL,cACfQ,YAAY,kBAEpB,2BAAON,QAAQ,cAAf,mCACA,yBAAKD,UAAU,eACX,2BACQE,GAAG,aACHd,MAAOgB,KAAK1B,MAAMK,WAClBsB,SAAUD,KAAKN,oBAE3B,4BAAQU,QAASJ,KAAKd,cAAtB,gB,GA1EImB,IAAMC,YCE9BC,iBAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SF0HtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,iB","file":"js/main.4701f6e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\n \r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass Scheduler extends React.Component{\r\n    state={ \r\n        players : '',\r\n        startDate: new Date(),\r\n        weeks:0,\r\n        offPlayers:0\r\n    }\r\n\r\n    assignStart = (e) =>{\r\n        this.setState({startDate:e.target.value});\r\n    }\r\n\r\n    assignWeeks = (e)=>{\r\n        this.setState({weeks:e.target.value});\r\n    }\r\n\r\n    submitParams = () =>{\r\n        console.log(`Start ${this.state.startDate}`);\r\n        console.log(`Weeks ${this.state.weeks}`);\r\n        console.log(`Players ${this.state.players}`);\r\n        console.log(`Off Players ${this.state.offPlayers}`);\r\n        fetch('/hello').then(response => \r\n            response.json().then(data => {\r\n                console.log(data);\r\n            })\r\n        );\r\n    }\r\n\r\n    updateOffPlayers = (e) =>{\r\n        this.setState({offPlayers:e.target.value});\r\n    }\r\n\r\n    updatePlayers = (e) =>{\r\n        this.setState({players:e.target.value});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-header text-center\">\r\n                    <h5 className=\"card-title\">Welcome to the Player Scheduler</h5>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <label className=\"card-text\" htmlFor=\"startDatePicker\">When does the campaign begin?</label>\r\n                    <div className=\"input-group mx-auto mb-3\">\r\n                        <DatePicker \r\n                            id=\"startDatePicker\"\r\n                            selected={this.state.startDate}\r\n                            onChange={this.assignStart}\r\n                            placeholderText=\"Start date\"/>\r\n                    </div>\r\n                    <label htmlFor=\"weeksInput\">How long will the campaign last</label>\r\n                    <div className=\"input-group\">\r\n                        <input \r\n                            id=\"weeksInput\"\r\n                            value={this.state.weeks}\r\n                            onChange={this.assignWeeks}\r\n                            placeholder=\"number of weeks\"/> weeks                       \r\n                    </div>\r\n                    <label htmlFor=\"players\">Players</label>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            id=\"players\"\r\n                            value={this.state.players}\r\n                            onChange={this.updatePlayers}\r\n                            placeholder=\"player names\"/>\r\n                    </div>\r\n                    <label htmlFor=\"offPlayers\">Number of players off in a week</label>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                                id=\"offPlayers\"\r\n                                value={this.state.offPlayers}\r\n                                onChange={this.updateOffPlayers}/>\r\n                    </div>\r\n                    <button onClick={this.submitParams}>Submit</button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Scheduler","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Scheduler from './Scheduler'\r\n\r\nrender(<Scheduler />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}